## the first day
```
#减少调用函数的参数值:调用functools.partical(func,parameters = None)
from functools import partical
def test_func(a,b,c,d):
  return a,b,c,d
s1 = partical(test_func,a = 1)
print(s1(1,2,3))
>>> 1,1,2,3   #固定某些参数(若未提供命名关键字，则按顺序) ,重新返回一个callable对象

s2 = partical(test_func,1,2)
print(s2(1,2))
#说人话就是：partical帮你创建一个函数（callable）对象，这个对象和原函数很像，但是有些要输入的参数已经填好了.
#你可以在调用函数的时候固定并互忽略这个函数某个参数.因此在某些特殊情况，你可以用partical修改你要调用的函数，使得满足要求
>>> 1,2,1,2
#当然 partical 能完成的，大部分可以由lambda完成
s1 = partical(test_func,a=1,b=2)
s3 = labmda c,d : return test_func(a=1,b=2,c,d)

#例子中提到 多进程的处理multiprocessing 和编写网络服务器 暂时没有接触到.
```
闭包和7.9 将单方法的类转化成函数
闭包 closure 本质上是一个函数 分成两部分 内嵌的函数，自由变量
一般的格式
```
def main_func(parameter):
    free_var = parameter
    def nested_func(parameter2):
        return free_var
    return nested_func
```
其中嵌套的函数可以引用外层函数的自由变量
最初我认为闭包优秀的地方在于可以传入两个自由变量.。
main_func(parameter)(parameter2)这个看起来比较高级..
而其中一个作用是暂时把外层函数的局部变量储存在内存中，若调用内嵌函数时，则可以调用局部变量
使得局部变量的引用成为可能
或者可以把变量当中局部变量存储起来
（避免使用全局变量，此外闭包允许将函数与其操作的环境关联起来）
7.9中的问题就是 除了定义__init__()方法外，只定义了一个方法的类，可以转化成闭包

```
class UrlTemplate:
  def __init__(self,template):
    self.template = template
  def open(self,**kwargs):
    return urlopen(self.template.format_map(kwargs))
  #可以使用闭包实现
  def UrlTempalte(template):
    def open(**kwargs):
        return urlopen(template.format_map(kwargs))
    return open
 ```
 ## 大部分单方法类是是为了存储额外的状态给方法使用，而使用内部函数或者闭包更优雅一点
 
 
# 要改变一个实例的字符串表示，可重新定义它的 __str__() 和 __repr__() 方法
```
Three conversion flags are currently supported: 
'!s' which calls str() on the value, '!r' which calls repr() and '!a' which calls ascii().

"Harold's a clever {0!s}"        # Calls str() on the argument first
"Bring out the holy {name!r}"    # Calls repr() on the argument first
```
例子
```
class Test:
  def __init__(self,x,y):
    self.x = x
    self.y = y
  def __repr__(self):
    return 'Test({0.x!r,0.y!s})'.format(self)
  def __str__(self):
    return '({0.x!r,0.y!r})'.format(self)
   #一般定义完__str__，可以使用 __repr__ = __str__
   #!r 格式化代码指明输出使用 __repr__() 来代替默认的 __str__() 
```  
"More {!a}"                      # Calls ascii() on the argument first

## *这里涉及到 repr 和str的区别*
python中合法的字符串表达式是带有双引号''的，所以repr是将字符串转换为合法的表达式，
而str则是将字符串转换为更容易让用户理解的形式，即简单的来说就是str是表现人看的，repr是表现给python看的

并且 __repr__()是用于直接返回字符串
__str__() 是需要调用 str() & print() 函数才能返回字符串

!r 让输入模式变成__repr__()  !s 让输入模式变成__str__()
```
class Pair:
  def __init__(self,x = 1,y = 2):
    self.x = x
    self.y = y
  def __repr__(self):
    return "Pair({0.x!r,0.y!s})".format(self)
  def __repr__(self):
    return "({0.x!r,0.y!r)".format(self)
    
print("P is {0!r}".format(Pair(3,4))) >>> P is Pair(3,4) 导入的是__repr__()方法
print("P is {0!s}".format(Pair(3,4))) >>> P is (3,4)   导入的是 __str__()方法
